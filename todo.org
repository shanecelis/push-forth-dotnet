* TODO
  - [ ] Predicates
  - [ ] Compiler
  - [ ] Compiler->Stack
* Features
  - Stack Interpolation "[3 8 {null}]"?
  - Accept arguments
  - 
* Compiler Notes
** Argument Handling
*** Pass all data stack items onto CIL stack immediately
    This is what I'm currently doing.  It has a couple problems though.
    
    - Hard to put an instance object above the arguments
    - What if boxing or unboxing is required?
*** Don't push data stack items onto CIL stack until required
    I started doing this, then I stopped.  Some issues were this:

    - Had to populate data stack with fake entries.
    
**** Features
     - Easy to add instance object
     - Can order arguments as I see fit
     - Can box or unbox arguments

** Compilation Modes
*** Program + Data
    Why bother with a stack if I can consume the stack in the compilation phase?
**** All data provided
**** A fixed stack layout with slots for variables
*** Program
    The data (stack) is provided by an outside entity, so the stack operations
    for input and output must be preserved.
** Functional
   No state but what is provided by the stack.
** Stateful/IO
   Operations that change external resources must be threaded/perserved.
   (Monad?)
