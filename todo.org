* TODO
  - [ ] Predicates
    Predicates are out. They can't be cleanly compiled. Let's just stick
    with types which we can compile.
  - [X] Compiler
  - [X] Compiler->Stack
  - [ ] Polymorphic instructions + for int, double, and string
  - [ ] Make Compiler and Interpreter have the same instructions
  - [ ] Run a bytecode interpreter (for iOS)
  - [ ] Make compiler use instruction factory.
* Features
  - Stack Interpolation "[3 8 {null}]"?
    
    Nah. Let's just use symbols or nullary instructions I mean.

  Func<object, Stack> f = Compile("[3 8 x]", "x");
  f(null);
  - [X] Accept arguments
** Generic types 
   `pop` pops the top thing. What if `pop<int>` popped the first int? What's its
   type? 
   
   void Pop<T>(T obj); // :: [T] -> []

   T Add<T>(T a, T b); // :: [T T] -> [T]

   While // :: [bool X Y ...] -> [X Y ...]
   If // :: [bool ([X] -> [Y]) ([X] -> [Y])]
   If // :: [bool ([X] -> [Y]) ([X] -> [Y])]

   I may need a unifier.

* Compiler Notes
** If
   `If` exposes a new issue in the argument handling. Namely that I need to have
   access to some stack items at compile time so I can compile them. This argues
   for pushing items onto the stack when required. It also means that any values
   that can be handled at compile time should be.

   It's even more complicated than that. The type I want for `if` is something
   like bool -> T -> T -> T. But I don't have any generic type handling, at
   least not with constraints.

   Also evaluating two separate stacks leaves the `types` stack into different
   possibly incompatible branches. This is difficult to contend with, but not
   insurmountable. Perhaps analyzing a Stack which evaluates to the same type(s)
   is the answer.
** Argument Handling
*** ABORTED Pass all data stack items onto CIL stack immediately
    This is what I'm currently doing.  It has a couple problems though.
    
    - Hard to put an instance object above the arguments
    - What if boxing or unboxing is required?
*** DONE Don't push data stack items onto CIL stack until required
    I started doing this, then I stopped.  Some issues were this:

    - Had to populate data stack with fake entries.
    
**** Features
     - Easy to add instance object
     - Can order arguments as I see fit
     - Can box or unbox arguments

** Compilation Modes
*** Program + Data
    Why bother with a stack if I can consume the stack in the compilation phase?
**** All data provided
**** A fixed stack layout with slots for variables
*** Program
    The data (stack) is provided by an outside entity, so the stack operations
    for input and output must be preserved.
** Functional
   No state but what is provided by the stack.
** Stateful/IO
   Operations that change external resources must be threaded/perserved.
   (Monad?)
* Assembly Code

  // public Assembly CompileAssembly(Stack program, string assemblyName, string className) {

  //       var asmName = new AssemblyName(assemblyName);
  //       // var asmBuilder = AssemblyBuilder.DefineDynamicAssembly(asmName, AssemblyBuilderAccess.Save);
  //       var asmBuilder = AssemblyBuilder.DefineDynamicAssembly//(asmName, AssemblyBuilderAccess.Save);
  //         (asmName, AssemblyBuilderAccess.Save);
  //       // var moduleBuilder = asmBuilder.DefineDynamicModule(asmName.Name + ".mod", asmName.Name + ".dll", false);
  //       // var moduleBuilder = asmBuilder.DefineDynamicModule(asmName.Name, asmName.Name + ".dll", true);
  //       // var moduleName = "MyModule";
  //       var moduleName = asmName.Name;
  //       // var moduleBuilder = asmBuilder.DefineDynamicModule(moduleName, moduleName + ".dll", true);
  //       var moduleBuilder = asmBuilder.DefineDynamicModule(moduleName, moduleName + ".dll");
  //       // var moduleBuilder = asmBuilder.DefineDynamicModule(asmName.Name + ".mod", asmName.Name + ".dll", false);
  //       // var moduleBuilder = asmBuilder.DefineDynamicModule(asmName.Name, asmName.Name + ".mod");

  //       // var typeBuilder = moduleBuilder.DefineType(className, TypeAttributes.Public, typeof(object), new Type[] { typeof(ICompiledBrain) });
  //       var typeBuilder = moduleBuilder.DefineType(className,
  //                                                  TypeAttributes.Public |
  //                                                  TypeAttributes.Class,
  //                                                  typeof(object));
  //       /*
  //         public static class Foo {
  //           public static Action<float[], float[]> GetBrain();
  //           public static int stateCount = 10;
  //         }
  //        */
  //       var methodBuilder = typeBuilder.DefineMethod("Run",
  //                                                    MethodAttributes.Static | MethodAttributes.Public,
  //                                                    typeof(Stack), new Type[] { });

  //       Type t = typeBuilder.CreateType();
  //       // asmBuilder.Save(moduleName + ".dll");
  //       return asmBuilder;
  // }

  // public Func<Stack> Compile(Stack program) {
  //   var s = program.ToRepr();
  //   Func<Stack> f;
  //   if (! memoizedPrograms.TryGetValue(s, out f))
  //     f = memoizedPrograms[s] = _Compile(program);
  //   return f;
  // }
